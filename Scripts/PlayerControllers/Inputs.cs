//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Neeto/Scripts/PlayerControllers/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""ThirdPerson"",
            ""id"": ""39d2bfbf-6ec6-421c-b0a2-9dee74aa7362"",
            ""actions"": [
                {
                    ""name"": ""MoveStick"",
                    ""type"": ""Value"",
                    ""id"": ""acc8fae2-fe5c-4e7f-b288-e02c0e03c21a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DoubleTap"",
                    ""type"": ""Button"",
                    ""id"": ""21647fbd-41f7-4235-a4ff-9bf30eb76ffa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""23057e8c-7460-4503-90cd-0fd82c5526fe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea2f2d78-a989-4a48-a0e6-fb751c49ca70"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""4eaa86c3-3e30-4993-8981-641cd984d505"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ece1e92b-a51b-4e88-9666-0c6732eb4d0c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e55ba27-9a11-46a2-8fd9-407c09fc1c01"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f27b157e-798a-4f0f-b59a-3adcdab10287"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7df395a2-24ac-4710-a367-c01dad3384cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3c6e78ab-c7ff-4477-87a8-dbc0f4b31446"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ThirdPerson"",
                    ""action"": ""DoubleTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35092597-f52a-4373-b74b-5e15f5ef961b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ThirdPerson"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf468d16-ad62-4bd5-a4da-acbf6069801d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Flying"",
            ""id"": ""ca7aff95-2869-424f-9b99-6917d638bac8"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""164f9e19-6fa6-4372-895c-89ed8b2c518e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move3D"",
                    ""type"": ""Value"",
                    ""id"": ""c7f11b43-7b3f-4d61-b4c8-a1368fbfbf88"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rise"",
                    ""type"": ""Value"",
                    ""id"": ""63dccc8f-218a-49b2-9654-65fe61938691"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fall"",
                    ""type"": ""Button"",
                    ""id"": ""205a0013-dfe6-4b07-bd04-d6b314f7804c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASDCtrlShift"",
                    ""id"": ""44ea9002-e1de-4a82-933c-f581465b59b0"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef7f91c1-4479-4860-b69e-e60f0489e60c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""274614b9-9d35-4564-9f12-3720e9e1d8be"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""623bec24-229e-406c-afd2-d4296c7db37f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1767e868-a4ad-493f-9cb2-74f7842b541b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""b3f13860-91c9-40a2-82d3-b1646a540c12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""bb4671be-6f24-4571-a584-aecc6e720ff7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move3D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b38e1e1f-7bac-48a2-8aa0-f73f806aaef9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8a48f17-97f9-4604-9008-7fddc94deb05"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ThirdPerson"",
                    ""action"": ""Rise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f1d564c-c7c2-419f-a60d-8eccde023573"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56f163d7-2df6-4e32-b914-350c18829e21"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ThirdPerson"",
                    ""action"": ""Fall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f85f0f94-099a-434c-bc58-dd47cffda917"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ThirdPerson"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6234690-9dc4-44dc-b377-257575a76c8e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ThirdPerson"",
            ""bindingGroup"": ""ThirdPerson"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ThirdPerson
        m_ThirdPerson = asset.FindActionMap("ThirdPerson", throwIfNotFound: true);
        m_ThirdPerson_MoveStick = m_ThirdPerson.FindAction("MoveStick", throwIfNotFound: true);
        m_ThirdPerson_DoubleTap = m_ThirdPerson.FindAction("DoubleTap", throwIfNotFound: true);
        m_ThirdPerson_Look = m_ThirdPerson.FindAction("Look", throwIfNotFound: true);
        // Flying
        m_Flying = asset.FindActionMap("Flying", throwIfNotFound: true);
        m_Flying_Look = m_Flying.FindAction("Look", throwIfNotFound: true);
        m_Flying_Move3D = m_Flying.FindAction("Move3D", throwIfNotFound: true);
        m_Flying_Rise = m_Flying.FindAction("Rise", throwIfNotFound: true);
        m_Flying_Fall = m_Flying.FindAction("Fall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ThirdPerson
    private readonly InputActionMap m_ThirdPerson;
    private List<IThirdPersonActions> m_ThirdPersonActionsCallbackInterfaces = new List<IThirdPersonActions>();
    private readonly InputAction m_ThirdPerson_MoveStick;
    private readonly InputAction m_ThirdPerson_DoubleTap;
    private readonly InputAction m_ThirdPerson_Look;
    public struct ThirdPersonActions
    {
        private @Inputs m_Wrapper;
        public ThirdPersonActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveStick => m_Wrapper.m_ThirdPerson_MoveStick;
        public InputAction @DoubleTap => m_Wrapper.m_ThirdPerson_DoubleTap;
        public InputAction @Look => m_Wrapper.m_ThirdPerson_Look;
        public InputActionMap Get() { return m_Wrapper.m_ThirdPerson; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ThirdPersonActions set) { return set.Get(); }
        public void AddCallbacks(IThirdPersonActions instance)
        {
            if (instance == null || m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Add(instance);
            @MoveStick.started += instance.OnMoveStick;
            @MoveStick.performed += instance.OnMoveStick;
            @MoveStick.canceled += instance.OnMoveStick;
            @DoubleTap.started += instance.OnDoubleTap;
            @DoubleTap.performed += instance.OnDoubleTap;
            @DoubleTap.canceled += instance.OnDoubleTap;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IThirdPersonActions instance)
        {
            @MoveStick.started -= instance.OnMoveStick;
            @MoveStick.performed -= instance.OnMoveStick;
            @MoveStick.canceled -= instance.OnMoveStick;
            @DoubleTap.started -= instance.OnDoubleTap;
            @DoubleTap.performed -= instance.OnDoubleTap;
            @DoubleTap.canceled -= instance.OnDoubleTap;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IThirdPersonActions instance)
        {
            if (m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IThirdPersonActions instance)
        {
            foreach (var item in m_Wrapper.m_ThirdPersonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ThirdPersonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ThirdPersonActions @ThirdPerson => new ThirdPersonActions(this);

    // Flying
    private readonly InputActionMap m_Flying;
    private List<IFlyingActions> m_FlyingActionsCallbackInterfaces = new List<IFlyingActions>();
    private readonly InputAction m_Flying_Look;
    private readonly InputAction m_Flying_Move3D;
    private readonly InputAction m_Flying_Rise;
    private readonly InputAction m_Flying_Fall;
    public struct FlyingActions
    {
        private @Inputs m_Wrapper;
        public FlyingActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Flying_Look;
        public InputAction @Move3D => m_Wrapper.m_Flying_Move3D;
        public InputAction @Rise => m_Wrapper.m_Flying_Rise;
        public InputAction @Fall => m_Wrapper.m_Flying_Fall;
        public InputActionMap Get() { return m_Wrapper.m_Flying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyingActions set) { return set.Get(); }
        public void AddCallbacks(IFlyingActions instance)
        {
            if (instance == null || m_Wrapper.m_FlyingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlyingActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Move3D.started += instance.OnMove3D;
            @Move3D.performed += instance.OnMove3D;
            @Move3D.canceled += instance.OnMove3D;
            @Rise.started += instance.OnRise;
            @Rise.performed += instance.OnRise;
            @Rise.canceled += instance.OnRise;
            @Fall.started += instance.OnFall;
            @Fall.performed += instance.OnFall;
            @Fall.canceled += instance.OnFall;
        }

        private void UnregisterCallbacks(IFlyingActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Move3D.started -= instance.OnMove3D;
            @Move3D.performed -= instance.OnMove3D;
            @Move3D.canceled -= instance.OnMove3D;
            @Rise.started -= instance.OnRise;
            @Rise.performed -= instance.OnRise;
            @Rise.canceled -= instance.OnRise;
            @Fall.started -= instance.OnFall;
            @Fall.performed -= instance.OnFall;
            @Fall.canceled -= instance.OnFall;
        }

        public void RemoveCallbacks(IFlyingActions instance)
        {
            if (m_Wrapper.m_FlyingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlyingActions instance)
        {
            foreach (var item in m_Wrapper.m_FlyingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlyingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlyingActions @Flying => new FlyingActions(this);
    private int m_ThirdPersonSchemeIndex = -1;
    public InputControlScheme ThirdPersonScheme
    {
        get
        {
            if (m_ThirdPersonSchemeIndex == -1) m_ThirdPersonSchemeIndex = asset.FindControlSchemeIndex("ThirdPerson");
            return asset.controlSchemes[m_ThirdPersonSchemeIndex];
        }
    }
    public interface IThirdPersonActions
    {
        void OnMoveStick(InputAction.CallbackContext context);
        void OnDoubleTap(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IFlyingActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove3D(InputAction.CallbackContext context);
        void OnRise(InputAction.CallbackContext context);
        void OnFall(InputAction.CallbackContext context);
    }
}
